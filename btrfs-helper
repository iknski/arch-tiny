#!/usr/bin/env bash

clear

echo "
 ____ ____ ____ ____ ____ _________ ____ ____ ____ ____ ____ ____
||b |||t |||r |||f |||s |||  for  |||h |||e |||l |||p |||e |||r ||
||__|||__|||__|||__|||__|||__EFI__|||__|||__|||__|||__|||__|||__||
|/__\|/__\|/__\|/__\|/__\|/_______\|/__\|/__\|/__\|/__\|/__\|/__\|

                            >>><<<
                        from  @iknski
                            >>><<<

                          WARNING!!! 
                  Only for UEFI API and SSD
        if you have a BIOS, please do everything manually
"

sleep 3
#-------------------------------------------------------------------------------
echo -n "--------------------------------------------------
"
echo -n "Select the disk where Arch Linux will be installed
"
echo -n "--------------------------------------------------
"
lsblk -o NAME,LABEL,UUID,FSTYPE,FSAVAIL,MOUNTPOINTS
echo -n "
"
echo -n "--------------------------------------------------
"
echo "Please enter the name of disk (like sda, nvme0n1)"
echo -n "--------------------------------------------------
"
#-------------------------------------------------------------------------------
blocks=()
for item in $(ls /sys/class/block)
do
blocks+=( "$item" )
done
for item in "${blocks[@]}"
do
read -r -p "| Arch Linux will be installed to -> /dev/. >>> " archdisk
	if [[ "${blocks[*]}" =~ $archdisk ]]; then
		echo "Your choise: $archdisk"
		break
	else
		echo "$archdisk !!! incorrect input, try again ..."
	fi
done
#-------------------------------------------------------------------------------
echo -n "
"
read -r -sn1 -p "WARNING!!! all data on /dev/$archdisk will be REMOVED
press any key to continue ..."; echo
wipefs -af /dev/$archdisk
cfdisk /dev/$archdisk
clear
read -r -sn1 -p "press any key to preparing the disk..."; echo
clear
#-------------------------------------------------------------------------------
echo "--------------------------------------------------
>>>          disk partition selection          <<<
--------------------------------------------------

Please enter the disk partitions you want to
create filesystem ( like sda1, sdb2, nvme0n1p3 )

ATTENTION!!!
if you didn't create a swap partition, skip swap
"
echo -n "--------------------------------------------------
"
lsblk -o NAME,LABEL,UUID,FSTYPE,FSAVAIL,MOUNTPOINTS
echo -n "--------------------------------------------------
"
echo -n "--------------------------------------------------
"
read -r -p "| boot -> /dev/. >>> " boot
read -r -p "| swap -> /dev/. >>> " swap
read -r -p "| root -> /dev/. >>> " root
echo "--------------------------------------------------
"
echo "Your choise:"
echo -n "--------------------------------------------------
"
echo -n "/dev/$boot -> boot partition
"
if [ -z "$swap" ]; then
    echo -n "/without a swap partition
"
else
    echo -n "/dev/$swap -> swap partition
"
fi
echo -n "/dev/$root -> root partition
"
echo -n "--------------------------------------------------
"
echo -n "If you want to add any additional disk, enter the name of the partition ( like sdb1 )
or leave this field empty ...
"
echo -n "--------------------------------------------------
"
read -r -p "| your any disk -> /dev/. >>> " anydisk
echo -n "--------------------------------------------------
"
echo -n "Enter the name of the directory where to mount it ( like storage, media, projects )
or leave this field empty ...
"
echo -n "--------------------------------------------------
"
read -r -p "| create directory -> /. >>> " adddir
echo -n "--------------------------------------------------
"
read -r -sn1 -p "press any key to format the partitions..."; echo
mkfs.vfat -F32 /dev/$boot
mkfs.btrfs -f /dev/$root
fatlabel /dev/$boot BOOT
btrfs filesystem label /dev/$root ROOT
if [ -n "$swap" ]; then
    mkswap /dev/$swap
    swapon /dev/$swap
fi
echo -n "--------------------------------------------------
"
read -r -sn1 -p "press any key to create subvolums and mounting the partitions..."; echo
echo -n "--------------------------------------------------
"
read -r -p "select the zstd compression level (1-15) >>> " clvl
mount  /dev/$root /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@cache
btrfs subvolume create /mnt/@log
btrfs subvolume create /mnt/@snapshots
umount -R /mnt
mount -o rw,noatime,compress=zstd:$clvl,space_cache=v2,discard=async,ssd,ssd_spread,max_inline=256,subvol=@ /dev/$root /mnt
mkdir -p /mnt/{boot/efi,home,.snapshots,var/{cache,log},$adddir}
echo "--------------------------------------------------"
ls -la --color /mnt
echo "--------------------------------------------------"
read -r -sn1 -p "check created dirs and press any key to continue..."; echo
mount -o rw,noatime,compress=zstd:$clvl,space_cache=v2,discard=async,ssd,ssd_spread,max_inline=256,subvol=@home  /dev/$root  /mnt/home
mount -o rw,noatime,compress=zstd:$clvl,space_cache=v2,discard=async,ssd,ssd_spread,max_inline=256,subvol=@cache  /dev/$root  /mnt/var/cache
mount -o rw,noatime,compress=zstd:$clvl,space_cache=v2,discard=async,ssd,ssd_spread,max_inline=256,subvol=@log  /dev/$root  /mnt/var/log
mount -o rw,noatime,compress=zstd:$clvl,space_cache=v2,discard=async,ssd,ssd_spread,max_inline=256,subvol=@snapshots  /dev/$root  /mnt/.snapshots
mount /dev/$boot /mnt/boot/efi
if [ -n "$anydisk" ]; then
    mount /dev/$anydisk /mnt/$adddir
fi
echo "--------------------------------------------------"
df -h
echo "--------------------------------------------------"
lsblk -o NAME,LABEL,UUID,FSTYPE,FSAVAIL,MOUNTPOINTS
echo "--------------------------------------------------"
read -r -sn1 -p "partitions have been created, press any key to continue
--------------------------------------------------
"; echo
clear
